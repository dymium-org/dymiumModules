% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-utils.R
\name{download_module}
\alias{download_module}
\title{Download a module from a repository.}
\usage{
download_module(
  name,
  repo = dymiumModulesRepo,
  version,
  force = FALSE,
  remove_download = FALSE,
  path = here::here()
)
}
\arguments{
\item{name}{(\code{character(1)})\cr
A module name.}

\item{repo}{\verb{(character(1)}\cr
A GitHub repository to look for modules.
By default, this uses 'dymium-org/dymiumModules' which is the main repository
that hosts the package and a public repository for shared modules.}

\item{version}{\verb{(character(1)}\cr
Version number of a module. This should follow the following convention,
if you want to download the version 1.1.0 of a module then you should type in
"1.1.0". If this field is left blank, the latest version of the module will be
used.}

\item{force}{(\code{logical(1)})\cr
Default as \code{FALSE}. Should the module be downloaded, even though the module
already exists locally in \code{path}.}

\item{remove_download}{\verb{(logical(1)}\cr
Default as \code{FALSE}. Whether to delete the downloaded zip file or not.}

\item{path}{\code{character(1)}\cr
Path the newly downloaded module will be saved at. \code{\link[here:here]{here::here()}} is
used to provide the default value which is is the root folder of the active
RStudio project.}
}
\value{
path to the module.
}
\description{
Download and extract a module to the 'modules' folder in the active working directory.
If you are using an RStudio project then it will be saved in the 'modules' folder
of your project. If the 'modules' folder does not exist, it will be created.
}
\examples{

\dontrun{
  # download an test module.
  download_modules('test', version = '0.0.1')
}

}
